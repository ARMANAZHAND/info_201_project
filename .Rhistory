num_with_majority = 0
results <- voting_data[[11]]
position <- voting_data[[15]]
for(i in 1:20) {
majority_vote = results[[i]]
print(majority_vote)
print(position[[i]])
if ((majority_vote == "Passed" & position[[i]] == "Yes")
| (majority_vote == "Failed" & position[[i]] == "No")) {
num_with_majority <- num_with_majority + 1
}
}
(num_with_majority / 20) * 100
}
getRepresentativeData <- function(key, state) {
base <- "https://api.propublica.org/congress/v1/members/"
request <- paste0(base, "house/", state, "/current.json")
getData <- GET(url=request, add_headers("X-API-Key"=key))
data <- content(getData, "text")
result <- fromJSON(data)
result
}
createHistogram <- function(party_data) {
total_members <- length(party_data)
sum <- 0
for (i in party_data) {
if (i=="R") {
sum <- sum + 1
}
}
republicans <- sum
democrats <- total_members - republicans
plot_ly(x = c(republicans, democrats), y = c("Republicans", "Democrats"), type = 'bar', orientation = 'h', color = I("Red"), marker = list(color=c(I("Red"), I("Blue"))))
}
createPieChart <- function(party_data) {
total_members <- length(party_data)
sum <- 0
for (i in party_data) {
if (i == "M") {
sum <- sum + 1
}
}
males <- sum
women <- total_members - males
slices <- c(males, women)
labels <- c("Men", "Women")
pie(slices, labels, main="Men vs. Women", col = c(I("Blue"), I("Red")))
}
get_random_id <- function(representative_data) {
num <- runif(1, 0, length(representative_data))
id <- representative_data %>% select(id) %>% filter(rownames(representative_data)==num)
id
}
representative_data <- getRepresentativeData("BI6tNWTbwUS7ytPpF6Xyjxp9XANPLXrEuh7nS2ug", str_sub("San Francisco, CA", -2, -1))
representative_data <- representative_data$results
id <- get_random_id(representative_data)
id
random_representative <- function(key, memberid) {
base <- "https://api.propublica.org/congress/v1/members/"
request <- paste0(base, memberid, ".json")
getData <- GET(url=request, add_headers("X-API-Key"=key))
data <- content(getData, "text")
result <- fromJSON(data)
result
}
representative_voting_data <- function(key, memberid) {
base <- "https://api.propublica.org/congress/v1/members/"
request <- paste0(base,memberid, "/votes.json")
getData <- GET(url=request, add_headers("X-API-Key"=key))
data <- content(getData, "text")
result <- fromJSON(data)
result
}
calculate_percentage <- function(voting_data) {
num_with_majority = 0
results <- voting_data[[11]]
position <- voting_data[[15]]
for(i in 1:20) {
majority_vote = results[[i]]
print(majority_vote)
print(position[[i]])
if ((majority_vote == "Passed" & position[[i]] == "Yes")
| (majority_vote == "Failed" & position[[i]] == "No")) {
num_with_majority <- num_with_majority + 1
}
}
(num_with_majority / 20) * 100
}
getRepresentativeData <- function(key, state) {
base <- "https://api.propublica.org/congress/v1/members/"
request <- paste0(base, "house/", state, "/current.json")
getData <- GET(url=request, add_headers("X-API-Key"=key))
data <- content(getData, "text")
result <- fromJSON(data)
result
}
createHistogram <- function(party_data) {
total_members <- length(party_data)
sum <- 0
for (i in party_data) {
if (i=="R") {
sum <- sum + 1
}
}
republicans <- sum
democrats <- total_members - republicans
plot_ly(x = c(republicans, democrats), y = c("Republicans", "Democrats"), type = 'bar', orientation = 'h', color = I("Red"), marker = list(color=c(I("Red"), I("Blue"))))
}
createPieChart <- function(party_data) {
total_members <- length(party_data)
sum <- 0
for (i in party_data) {
if (i == "M") {
sum <- sum + 1
}
}
males <- sum
women <- total_members - males
slices <- c(males, women)
labels <- c("Men", "Women")
pie(slices, labels, main="Men vs. Women", col = c(I("Blue"), I("Red")))
}
get_random_id <- function(representative_data) {
num <- runif(1, 0, length(representative_data))
id <- representative_data %>% select(id) %>% filter(as.numeric(rownames(representative_data))==num)
id
}
representative_data <- getRepresentativeData("BI6tNWTbwUS7ytPpF6Xyjxp9XANPLXrEuh7nS2ug", str_sub("San Francisco, CA", -2, -1))
representative_data <- representative_data$results
id <- get_random_id(representative_data)
id
random_representative <- function(key, memberid) {
base <- "https://api.propublica.org/congress/v1/members/"
request <- paste0(base, memberid, ".json")
getData <- GET(url=request, add_headers("X-API-Key"=key))
data <- content(getData, "text")
result <- fromJSON(data)
result
}
representative_voting_data <- function(key, memberid) {
base <- "https://api.propublica.org/congress/v1/members/"
request <- paste0(base,memberid, "/votes.json")
getData <- GET(url=request, add_headers("X-API-Key"=key))
data <- content(getData, "text")
result <- fromJSON(data)
result
}
calculate_percentage <- function(voting_data) {
num_with_majority = 0
results <- voting_data[[11]]
position <- voting_data[[15]]
for(i in 1:20) {
majority_vote = results[[i]]
print(majority_vote)
print(position[[i]])
if ((majority_vote == "Passed" & position[[i]] == "Yes")
| (majority_vote == "Failed" & position[[i]] == "No")) {
num_with_majority <- num_with_majority + 1
}
}
(num_with_majority / 20) * 100
}
getRepresentativeData <- function(key, state) {
base <- "https://api.propublica.org/congress/v1/members/"
request <- paste0(base, "house/", state, "/current.json")
getData <- GET(url=request, add_headers("X-API-Key"=key))
data <- content(getData, "text")
result <- fromJSON(data)
result
}
createHistogram <- function(party_data) {
total_members <- length(party_data)
sum <- 0
for (i in party_data) {
if (i=="R") {
sum <- sum + 1
}
}
republicans <- sum
democrats <- total_members - republicans
plot_ly(x = c(republicans, democrats), y = c("Republicans", "Democrats"), type = 'bar', orientation = 'h', color = I("Red"), marker = list(color=c(I("Red"), I("Blue"))))
}
createPieChart <- function(party_data) {
total_members <- length(party_data)
sum <- 0
for (i in party_data) {
if (i == "M") {
sum <- sum + 1
}
}
males <- sum
women <- total_members - males
slices <- c(males, women)
labels <- c("Men", "Women")
pie(slices, labels, main="Men vs. Women", col = c(I("Blue"), I("Red")))
}
get_random_id <- function(representative_data) {
num <- as.integer(runif(1, 0, length(representative_data)))
id <- representative_data %>% select(id) %>% filter(as.numeric(rownames(representative_data))==num)
id
}
representative_data <- getRepresentativeData("BI6tNWTbwUS7ytPpF6Xyjxp9XANPLXrEuh7nS2ug", str_sub("San Francisco, CA", -2, -1))
representative_data <- representative_data$results
id <- get_random_id(representative_data)
id
random_representative <- function(key, memberid) {
base <- "https://api.propublica.org/congress/v1/members/"
request <- paste0(base, memberid, ".json")
getData <- GET(url=request, add_headers("X-API-Key"=key))
data <- content(getData, "text")
result <- fromJSON(data)
result
}
representative_voting_data <- function(key, memberid) {
base <- "https://api.propublica.org/congress/v1/members/"
request <- paste0(base,memberid, "/votes.json")
getData <- GET(url=request, add_headers("X-API-Key"=key))
data <- content(getData, "text")
result <- fromJSON(data)
result
}
calculate_percentage <- function(voting_data) {
num_with_majority = 0
results <- voting_data[[11]]
position <- voting_data[[15]]
for(i in 1:20) {
majority_vote = results[[i]]
print(majority_vote)
print(position[[i]])
if ((majority_vote == "Passed" & position[[i]] == "Yes")
| (majority_vote == "Failed" & position[[i]] == "No")) {
num_with_majority <- num_with_majority + 1
}
}
(num_with_majority / 20) * 100
}
library(data.table)
library(R.utils)
library(dplyr)
library(ggplot2)
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
data <- data.table::fread("temp_prec_middle_encrypted.csv.bz2")
## filter out North American observations
data <- data %>% filter(latitude > 5, latitude < 85, longitude < 310, longitude > 230)
View(data)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
## -------------------- do the following for 1960, 1986, 2014 and temp/precipitation --------------------
## select jpg graphics device
#
# ## select the correct year - plot longitude-latitude and color according to the temp/prec variable
# ## I recommend to use ggplot() but you can use something else too.
# ##
# ## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
# ## makes the map scale to look better.  You can also pick a particular map projection, look
# ## the documentation.  (You need 'mapproj' library).
# ## Warning: map projections may be slow (several minutes per plot).
library(mapproj)
# View(data_1960)
# latitude <- data_1960 %>% select(latitude)
# longitude <- data_1960 %>% select(longitude)
## June 1960
# createMaps <- function(years) {
#   for (year in years) {
#     print(year)
#     data <- data %>% filter(year(time)==year, month(time)==06)
#     View(data)
#     jpeg(filename=paste0(year, "_precip.png"), width=1000, height = 1000)
#     ggplot(data) + geom_point(mapping = aes(x = longitude, y = latitude, col = precipitation, size = 4)) + labs(title = paste0("Precipitation in June, ", year)) + coord_map()
#
#     jpeg(filename=paste0(year, "_temp.png"), width=1000, height = 1000)
#     ggplot(data) + geom_point(mapping = aes(x = longitude, y = latitude, color = airtemp)) + labs(title = paste0("Air Temperature in June, ", year)) + coord_map()
#     dev.off()
#   }
# }
# jpeg(filename="1960_precip.png", width=1000, height = 1000)
# data_1960 <- data %>% filter(year(time)==1960, month(time)==06)
# ggplot(data_1960) + geom_point(mapping = aes(x = longitude, y = latitude, col = precipitation, size = 4)) + labs(title = "Precipitation in June, 1960") + coord_map()
#
# jpeg("1960_temp", width =1000, height=1000)
# ggplot(data_1960) + geom_point(mapping = aes(x = longitude, y = latitude, color = airtemp)) + labs(title = "Air Temperature in June, 1960") + coord_map()
# dev.off()
createMaps(c(1960, 1986, 2014))
## close the device
## -------------------- you are done.  congrats :-) --------------------
library(data.table)
library(R.utils)
library(dplyr)
library(ggplot2)
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
data <- data.table::fread("temp_prec_middle_encrypted.csv.bz2")
## filter out North American observations
data <- data %>% filter(latitude > 5, latitude < 85, longitude < 310, longitude > 230)
View(data)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
## -------------------- do the following for 1960, 1986, 2014 and temp/precipitation --------------------
## select jpg graphics device
#
# ## select the correct year - plot longitude-latitude and color according to the temp/prec variable
# ## I recommend to use ggplot() but you can use something else too.
# ##
# ## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
# ## makes the map scale to look better.  You can also pick a particular map projection, look
# ## the documentation.  (You need 'mapproj' library).
# ## Warning: map projections may be slow (several minutes per plot).
library(mapproj)
# View(data_1960)
# latitude <- data_1960 %>% select(latitude)
# longitude <- data_1960 %>% select(longitude)
## June 1960
# createMaps <- function(years) {
#   for (year in years) {
#     print(year)
#     data <- data %>% filter(year(time)==year, month(time)==06)
#     View(data)
#     jpeg(filename=paste0(year, "_precip.png"), width=1000, height = 1000)
#     ggplot(data) + geom_point(mapping = aes(x = longitude, y = latitude, col = precipitation, size = 4)) + labs(title = paste0("Precipitation in June, ", year)) + coord_map()
#
#     jpeg(filename=paste0(year, "_temp.png"), width=1000, height = 1000)
#     ggplot(data) + geom_point(mapping = aes(x = longitude, y = latitude, color = airtemp)) + labs(title = paste0("Air Temperature in June, ", year)) + coord_map()
#     dev.off()
#   }
# }
# jpeg(filename="1960_precip.png", width=1000, height = 1000)
# data_1960 <- data %>% filter(year(time)==1960, month(time)==06)
# ggplot(data_1960) + geom_point(mapping = aes(x = longitude, y = latitude, col = precipitation, size = 4)) + labs(title = "Precipitation in June, 1960") + coord_map()
#
# jpeg("1960_temp", width =1000, height=1000)
# ggplot(data_1960) + geom_point(mapping = aes(x = longitude, y = latitude, color = airtemp)) + labs(title = "Air Temperature in June, 1960") + coord_map()
# dev.off()
createMaps(c(1960, 1986, 2014))
## close the device
## -------------------- you are done.  congrats :-) --------------------
library(data.table)
library(R.utils)
library(dplyr)
library(ggplot2)
## read the data
##
## hint1: figure out the correct format and use the correct function.
##
## hint2: read.table and friends are slow (about 6 min to read data).
## You may use data.table::fread instead (a few seconds)
data <- data.table::fread("temp_prec_tiny.csv.bz2")
## filter out North American observations
data <- data %>% filter(latitude > 5, latitude < 85, longitude < 310, longitude > 230)
View(data)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
## -------------------- do the following for 1960, 1986, 2014 and temp/precipitation --------------------
## select jpg graphics device
#
# ## select the correct year - plot longitude-latitude and color according to the temp/prec variable
# ## I recommend to use ggplot() but you can use something else too.
# ##
# ## Note: if using ggplot, you may want to add "+ coord_map()" at the end of the plot.  This
# ## makes the map scale to look better.  You can also pick a particular map projection, look
# ## the documentation.  (You need 'mapproj' library).
# ## Warning: map projections may be slow (several minutes per plot).
library(mapproj)
# View(data_1960)
# latitude <- data_1960 %>% select(latitude)
# longitude <- data_1960 %>% select(longitude)
## June 1960
# createMaps <- function(years) {
#   for (year in years) {
#     print(year)
#     data <- data %>% filter(year(time)==year, month(time)==06)
#     View(data)
#     jpeg(filename=paste0(year, "_precip.png"), width=1000, height = 1000)
#     ggplot(data) + geom_point(mapping = aes(x = longitude, y = latitude, col = precipitation, size = 4)) + labs(title = paste0("Precipitation in June, ", year)) + coord_map()
#
#     jpeg(filename=paste0(year, "_temp.png"), width=1000, height = 1000)
#     ggplot(data) + geom_point(mapping = aes(x = longitude, y = latitude, color = airtemp)) + labs(title = paste0("Air Temperature in June, ", year)) + coord_map()
#     dev.off()
#   }
# }
# jpeg(filename="1960_precip.png", width=1000, height = 1000)
# data_1960 <- data %>% filter(year(time)==1960, month(time)==06)
# ggplot(data_1960) + geom_point(mapping = aes(x = longitude, y = latitude, col = precipitation, size = 4)) + labs(title = "Precipitation in June, 1960") + coord_map()
#
# jpeg("1960_temp", width =1000, height=1000)
# ggplot(data_1960) + geom_point(mapping = aes(x = longitude, y = latitude, color = airtemp)) + labs(title = "Air Temperature in June, 1960") + coord_map()
# dev.off()
createMaps(c(1960, 1986, 2014))
## close the device
## -------------------- you are done.  congrats :-) --------------------
shiny::runApp('Desktop/INFO 201/in_class')
getwd()
install.packages("png")
install.packages("jpeg")
install.packages("grid")
install.packages("grid")
?grid.arrange
??grid.arrange
install.packages("gridExtra")
?fread
?
??fread
?fread
t.test(2.0, 8)
dchisq(4.03, 3)
dchisq(2, 3)
dchisq(4.03, 3)
dat <- data.frame(wins=wins, gamePts=gamePts)
aov.1 = aov(gamePts~ as.factor(wins), data=dat)
summary(aov.1)
interceptions <- c(11, 8, 15, 14, 8, 11, 8, 12, 15, 7, 8, 13, 9, 12, 18, 14,
13, 21, 14, 22, 17, 28, 17, 12, 18, 13, 12, 16, 13, 9, 10, 12)
wins <- c(9, 13, 13, 5, 11, 9, 10, 10, 6, 11, 13, 7, 13, 9, 8, 6, 10, 6, 3,
5, 4, 0, 9, 5, 7, 9, 7, 11, 9, 4, 9, 5)
gamePts <- c(22.2, 28.6, 25.4, 20.9, 28, 25.6, 25.9, 22.1, 20.7, 29.9, 23.9,
21.4, 28.6, 22.9, 18.4, 18.8, 26.1, 17.6, 15.4, 18.1, 21.1, 14.6,
20.9, 18.6, 20, 22.1, 18.1, 22.7, 24.7, 16.4, 18.9, 16.5)
# wins <- sort(wins)
# data <- table(interceptions, wins)
# chisq <- chisq.test(data)
# chisq
dat <- data.frame(wins=wins, gamePts=gamePts)
View(dat)
aov.1 = aov(gamePts~ as.factor(wins), data=dat)
summary(aov.1)
shiny::runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
shiny::runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
month.abb[1]
runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
shiny::runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
shiny::runApp('Desktop/INFO 201/a8-app-liamkokeeffe/ufo')
x <- c(5, 12, 14, 17, 23, 30, 40, 47, 55, 67, 72, 81, 96, 112, 127)
y <- c(4, 10, 13, 15, 15, 25, 27, 46, 38, 46, 53, 70, 82, 99, 100)
plot(x, y)
x <- c(5, 12, 14, 17, 23, 30, 40, 47, 55, 67, 72, 81, 96, 112, 127)
y <- c(4, 10, 13, 15, 15, 25, 27, 46, 38, 46, 53, 70, 82, 99, 100)
plot(x, y)
s_x_y <- sum(x*y) - ((sum(x) * sum(y))/15)
s_x_x <- sum(x^2) - (((sum(x))^2)/15)
s_x_y / s_x_x
s_x_y <- sum(x*y) - ((sum(x) * sum(y))/15)
s_x_y
s_x_x <- sum(x^2) - (((sum(x))^2)/15)
s_x_x
s_x_y / s_x_x
mean(y)
mean(x)
s_y_y <- (sum(y^2)) - (((sum(y))^2)/15)
s_y_y
conv <- c(.0011, .0014, .0018, .0022, .0010, .0016, .0028, .0020, .0015, .0014, .0023, .0017, .0020)
perf <- c(.0011, .0010, .0019, .0013, .0011, .0017, .0024, .0020, .0013, .0013, .0017, .0015, .0013)
mean(conv)
mean(perf)
mean(conv)
mean(perf)
sd(conv)
sd(perf)
shiny::runApp('Desktop/INFO 201/info_201_project/liam-shinyapp')
runApp('Desktop/INFO 201/info_201_project/liam-shinyapp')
runApp('Desktop/INFO 201/info_201_project/liam-shinyapp')
runApp('Desktop/INFO 201/info_201_project/liam-shinyapp')
runApp('Desktop/INFO 201/info_201_project/liam-shinyapp')
runApp('Desktop/INFO 201/info_201_project/liam-shinyapp')
runApp('Desktop/INFO 201/info_201_project/liam-shinyapp')
getwd()
setwd("/Users/liamokeeffe/Desktop/INFO 201/info_201_project")
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
getwd()
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
?filter
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
runApp('liam-shinyapp')
